{"version":3,"file":"static/js/945.51c91f07.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@noble/curves/src/abstract/edwards.ts","../node_modules/@noble/curves/src/ed25519.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/error.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/utils.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/struct.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/utilities.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/types.ts","../node_modules/@solana/web3.js/node_modules/superstruct/src/structs/coercions.ts","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/message/versioned.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/transaction/versioned.ts","../node_modules/@solana/web3.js/src/timing.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/node_modules/.pnpm/fast-stable-stringify@1.0.0/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/rpc-websocket.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/solana-provider/node_modules/@web3auth/base/src/utils.ts","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/base-x/src/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/bs58/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/node_modules/eventemitter3/index.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/classCallCheck.js","../node_modules/@babel/runtime/helpers/createClass.js","../node_modules/@babel/runtime/helpers/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/inherits.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/toPrimitive.js","../node_modules/@babel/runtime/helpers/toPropertyKey.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y²\nimport { mod } from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes, FHash, Hex } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _8n = BigInt(8);\n\n// Edwards curves must declare params a & d.\nexport type CurveType = BasicCurve<bigint> & {\n  a: bigint; // curve param a\n  d: bigint; // curve param d\n  hash: FHash; // Hashing\n  randomBytes: (bytesLength?: number) => Uint8Array; // CSPRNG\n  adjustScalarBytes?: (bytes: Uint8Array) => Uint8Array; // clears bits to get valid field elemtn\n  domain?: (data: Uint8Array, ctx: Uint8Array, phflag: boolean) => Uint8Array; // Used for hashing\n  uvRatio?: (u: bigint, v: bigint) => { isValid: boolean; value: bigint }; // Ratio √(u/v)\n  prehash?: FHash; // RFC 8032 pre-hashing of messages to sign() / verify()\n  mapToCurve?: (scalar: bigint[]) => AffinePoint<bigint>; // for hash-to-curve standard\n};\n\n// verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\nconst VERIFY_DEFAULT = { zip215: true };\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    curve,\n    {\n      hash: 'function',\n      a: 'bigint',\n      d: 'bigint',\n      randomBytes: 'function',\n    },\n    {\n      adjustScalarBytes: 'function',\n      domain: 'function',\n      uvRatio: 'function',\n      mapToCurve: 'function',\n    }\n  );\n  // Set defaults\n  return Object.freeze({ ...opts } as const);\n}\n\n// Instance of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointType extends Group<ExtPointType> {\n  readonly ex: bigint;\n  readonly ey: bigint;\n  readonly ez: bigint;\n  readonly et: bigint;\n  get x(): bigint;\n  get y(): bigint;\n  assertValidity(): void;\n  multiply(scalar: bigint): ExtPointType;\n  multiplyUnsafe(scalar: bigint): ExtPointType;\n  isSmallOrder(): boolean;\n  isTorsionFree(): boolean;\n  clearCofactor(): ExtPointType;\n  toAffine(iz?: bigint): AffinePoint<bigint>;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n}\n// Static methods of Extended Point with coordinates in X, Y, Z, T\nexport interface ExtPointConstructor extends GroupConstructor<ExtPointType> {\n  new (x: bigint, y: bigint, z: bigint, t: bigint): ExtPointType;\n  fromAffine(p: AffinePoint<bigint>): ExtPointType;\n  fromHex(hex: Hex): ExtPointType;\n  fromPrivateKey(privateKey: Hex): ExtPointType;\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: Hex) => Uint8Array;\n  sign: (message: Hex, privateKey: Hex, options?: { context?: Hex }) => Uint8Array;\n  verify: (\n    sig: Hex,\n    message: Hex,\n    publicKey: Hex,\n    options?: { context?: Hex; zip215: boolean }\n  ) => boolean;\n  ExtendedPoint: ExtPointConstructor;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    getExtendedPublicKey: (key: Hex) => {\n      head: Uint8Array;\n      prefix: Uint8Array;\n      scalar: bigint;\n      point: ExtPointType;\n      pointBytes: Uint8Array;\n    };\n  };\n};\n\n// It is not generic twisted curve for now, but ed25519/ed448 generic implementation\nexport function twistedEdwards(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const {\n    Fp,\n    n: CURVE_ORDER,\n    prehash: prehash,\n    hash: cHash,\n    randomBytes,\n    nByteLength,\n    h: cofactor,\n  } = CURVE;\n  const MASK = _2n << (BigInt(nByteLength * 8) - _1n);\n  const modP = Fp.create; // Function overrides\n\n  // sqrt(u/v)\n  const uvRatio =\n    CURVE.uvRatio ||\n    ((u: bigint, v: bigint) => {\n      try {\n        return { isValid: true, value: Fp.sqrt(u * Fp.inv(v)) };\n      } catch (e) {\n        return { isValid: false, value: _0n };\n      }\n    });\n  const adjustScalarBytes = CURVE.adjustScalarBytes || ((bytes: Uint8Array) => bytes); // NOOP\n  const domain =\n    CURVE.domain ||\n    ((data: Uint8Array, ctx: Uint8Array, phflag: boolean) => {\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n  const inBig = (n: bigint) => typeof n === 'bigint' && _0n < n; // n in [1..]\n  const inRange = (n: bigint, max: bigint) => inBig(n) && inBig(max) && n < max; // n in [1..max-1]\n  const in0MaskRange = (n: bigint) => n === _0n || inRange(n, MASK); // n in [0..MASK-1]\n  function assertInRange(n: bigint, max: bigint) {\n    // n in [1..max-1]\n    if (inRange(n, max)) return n;\n    throw new Error(`Expected valid scalar < ${max}, got ${typeof n} ${n}`);\n  }\n  function assertGE0(n: bigint) {\n    // n in [0..CURVE_ORDER-1]\n    return n === _0n ? n : assertInRange(n, CURVE_ORDER); // GE = prime subgroup, not full group\n  }\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function isPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n  }\n  // Extended Point works in extended coordinates: (x, y, z, t) ∋ (x=x/z, y=y/z, t=xy).\n  // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n  class Point implements ExtPointType {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    static readonly ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n\n    constructor(\n      readonly ex: bigint,\n      readonly ey: bigint,\n      readonly ez: bigint,\n      readonly et: bigint\n    ) {\n      if (!in0MaskRange(ex)) throw new Error('x required');\n      if (!in0MaskRange(ey)) throw new Error('y required');\n      if (!in0MaskRange(ez)) throw new Error('z required');\n      if (!in0MaskRange(et)) throw new Error('t required');\n    }\n\n    get x(): bigint {\n      return this.toAffine().x;\n    }\n    get y(): bigint {\n      return this.toAffine().y;\n    }\n\n    static fromAffine(p: AffinePoint<bigint>): Point {\n      if (p instanceof Point) throw new Error('extended point not allowed');\n      const { x, y } = p || {};\n      if (!in0MaskRange(x) || !in0MaskRange(y)) throw new Error('invalid affine point');\n      return new Point(x, y, _1n, modP(x * y));\n    }\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.ez));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity(): void {\n      const { a, d } = CURVE;\n      if (this.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const { ex: X, ey: Y, ez: Z, et: T } = this;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n    }\n\n    // Compare one point to another.\n    equals(other: Point): boolean {\n      isPoint(other);\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2 } = other;\n      const X1Z2 = modP(X1 * Z2);\n      const X2Z1 = modP(X2 * Z1);\n      const Y1Z2 = modP(Y1 * Z2);\n      const Y2Z1 = modP(Y2 * Z1);\n      return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n\n    protected is0(): boolean {\n      return this.equals(Point.ZERO);\n    }\n\n    negate(): Point {\n      // Flips point sign to a negative one (-x, y in affine coords)\n      return new Point(modP(-this.ex), this.ey, this.ez, modP(-this.et));\n    }\n\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double(): Point {\n      const { a } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1 } = this;\n      const A = modP(X1 * X1); // A = X12\n      const B = modP(Y1 * Y1); // B = Y12\n      const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n      const D = modP(a * A); // D = a*A\n      const x1y1 = X1 + Y1;\n      const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n      const G = D + B; // G = D+B\n      const F = G - C; // F = G-C\n      const H = D - B; // H = D-B\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(other: Point) {\n      isPoint(other);\n      const { a, d } = CURVE;\n      const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n      const { ex: X2, ey: Y2, ez: Z2, et: T2 } = other;\n      // Faster algo for adding 2 Extended Points when curve's a=-1.\n      // http://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-4\n      // Cost: 8M + 8add + 2*2.\n      // Note: It does not check whether the `other` point is valid.\n      if (a === BigInt(-1)) {\n        const A = modP((Y1 - X1) * (Y2 + X2));\n        const B = modP((Y1 + X1) * (Y2 - X2));\n        const F = modP(B - A);\n        if (F === _0n) return this.double(); // Same point. Tests say it doesn't affect timing\n        const C = modP(Z1 * _2n * T2);\n        const D = modP(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = modP(E * F);\n        const Y3 = modP(G * H);\n        const T3 = modP(E * H);\n        const Z3 = modP(F * G);\n        return new Point(X3, Y3, Z3, T3);\n      }\n      const A = modP(X1 * X2); // A = X1*X2\n      const B = modP(Y1 * Y2); // B = Y1*Y2\n      const C = modP(T1 * d * T2); // C = T1*d*T2\n      const D = modP(Z1 * Z2); // D = Z1*Z2\n      const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n      const F = D - C; // F = D-C\n      const G = D + C; // G = D+C\n      const H = modP(B - a * A); // H = B-a*A\n      const X3 = modP(E * F); // X3 = E*F\n      const Y3 = modP(G * H); // Y3 = G*H\n      const T3 = modP(E * H); // T3 = E*H\n      const Z3 = modP(F * G); // Z3 = F*G\n\n      return new Point(X3, Y3, Z3, T3);\n    }\n\n    subtract(other: Point): Point {\n      return this.add(other.negate());\n    }\n\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, Point.normalizeZ);\n    }\n\n    // Constant-time multiplication.\n    multiply(scalar: bigint): Point {\n      const { p, f } = this.wNAF(assertInRange(scalar, CURVE_ORDER));\n      return Point.normalizeZ([p, f])[0];\n    }\n\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    multiplyUnsafe(scalar: bigint): Point {\n      let n = assertGE0(scalar); // 0 <= scalar < CURVE.n\n      if (n === _0n) return I;\n      if (this.equals(I) || n === _1n) return this;\n      if (this.equals(G)) return this.wNAF(n).p;\n      return wnaf.unsafeLadder(this, n);\n    }\n\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder(): boolean {\n      return this.multiplyUnsafe(cofactor).is0();\n    }\n\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree(): boolean {\n      return wnaf.unsafeLadder(this, CURVE_ORDER).is0();\n    }\n\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(iz?: bigint): AffinePoint<bigint> {\n      const { ex: x, ey: y, ez: z } = this;\n      const is0 = this.is0();\n      if (iz == null) iz = is0 ? _8n : (Fp.inv(z) as bigint); // 8 was chosen arbitrarily\n      const ax = modP(x * iz);\n      const ay = modP(y * iz);\n      const zz = modP(z * iz);\n      if (is0) return { x: _0n, y: _1n };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n\n    clearCofactor(): Point {\n      const { h: cofactor } = CURVE;\n      if (cofactor === _1n) return this;\n      return this.multiplyUnsafe(cofactor);\n    }\n\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(hex: Hex, zip215 = false): Point {\n      const { d, a } = CURVE;\n      const len = Fp.BYTES;\n      hex = ensureBytes('pointHex', hex, len); // copy hex to a new array\n      const normed = hex.slice(); // copy again, we'll manipulate it\n      const lastByte = hex[len - 1]; // select last byte\n      normed[len - 1] = lastByte & ~0x80; // clear last bit\n      const y = ut.bytesToNumberLE(normed);\n      if (y === _0n) {\n        // y=0 is allowed\n      } else {\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        if (zip215) assertInRange(y, MASK); // zip215=true [1..P-1] (2^255-19-1 for ed25519)\n        else assertInRange(y, Fp.ORDER); // zip215=false [1..MASK-1] (2^256-1 for ed25519)\n      }\n\n      // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n      // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n      const y2 = modP(y * y); // denominator is always non-0 mod p.\n      const u = modP(y2 - _1n); // u = y² - 1\n      const v = modP(d * y2 - a); // v = d y² + 1.\n      let { isValid, value: x } = uvRatio(u, v); // √(u/v)\n      if (!isValid) throw new Error('Point.fromHex: invalid y coordinate');\n      const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n      const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n      if (!zip215 && x === _0n && isLastByteOdd)\n        // if x=0 and x_0 = 1, fail\n        throw new Error('Point.fromHex: x=0 and x_0=1');\n      if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n      return Point.fromAffine({ x, y });\n    }\n    static fromPrivateKey(privKey: Hex) {\n      return getExtendedPublicKey(privKey).point;\n    }\n    toRawBytes(): Uint8Array {\n      const { x, y } = this.toAffine();\n      const bytes = ut.numberToBytesLE(y, Fp.BYTES); // each y has 2 x values (x, -y)\n      bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0; // when compressing, it's enough to store y\n      return bytes; // and use the last byte to encode sign of x\n    }\n    toHex(): string {\n      return ut.bytesToHex(this.toRawBytes()); // Same as toRawBytes, but returns string.\n    }\n  }\n  const { BASE: G, ZERO: I } = Point;\n  const wnaf = wNAF(Point, nByteLength * 8);\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  // Little-endian SHA512 with modulo n\n  function modN_LE(hash: Uint8Array): bigint {\n    return modN(ut.bytesToNumberLE(hash));\n  }\n\n  /** Convenience method that creates public key and other stuff. RFC8032 5.1.5 */\n  function getExtendedPublicKey(key: Hex) {\n    const len = nByteLength;\n    key = ensureBytes('private key', key, len);\n    // Hash private key with curve's hash function to produce uniformingly random input\n    // Check byte lengths: ensure(64, h(ensure(32, key)))\n    const hashed = ensureBytes('hashed private key', cHash(key), 2 * len);\n    const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n    const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n    const scalar = modN_LE(head); // The actual private scalar\n    const point = G.multiply(scalar); // Point on Edwards curve aka public key\n    const pointBytes = point.toRawBytes(); // Uint8Array representation\n    return { head, prefix, scalar, point, pointBytes };\n  }\n\n  // Calculates EdDSA pub key. RFC8032 5.1.5. Privkey is hashed. Use first half with 3 bits cleared\n  function getPublicKey(privKey: Hex): Uint8Array {\n    return getExtendedPublicKey(privKey).pointBytes;\n  }\n\n  // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n  function hashDomainToScalar(context: Hex = new Uint8Array(), ...msgs: Uint8Array[]) {\n    const msg = ut.concatBytes(...msgs);\n    return modN_LE(cHash(domain(msg, ensureBytes('context', context), !!prehash)));\n  }\n\n  /** Signs message with privateKey. RFC8032 5.1.6 */\n  function sign(msg: Hex, privKey: Hex, options: { context?: Hex } = {}): Uint8Array {\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph etc.\n    const { prefix, scalar, pointBytes } = getExtendedPublicKey(privKey);\n    const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n    const R = G.multiply(r).toRawBytes(); // R = rG\n    const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n    const s = modN(r + k * scalar); // S = (r + k * s) mod L\n    assertGE0(s); // 0 <= s < l\n    const res = ut.concatBytes(R, ut.numberToBytesLE(s, Fp.BYTES));\n    return ensureBytes('result', res, nByteLength * 2); // 64-byte signature\n  }\n\n  const verifyOpts: { context?: Hex; zip215?: boolean } = VERIFY_DEFAULT;\n  function verify(sig: Hex, msg: Hex, publicKey: Hex, options = verifyOpts): boolean {\n    const { context, zip215 } = options;\n    const len = Fp.BYTES; // Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n    sig = ensureBytes('signature', sig, 2 * len); // An extended group equation is checked.\n    msg = ensureBytes('message', msg);\n    if (prehash) msg = prehash(msg); // for ed25519ph, etc\n\n    const s = ut.bytesToNumberLE(sig.slice(len, 2 * len));\n    // zip215: true is good for consensus-critical apps and allows points < 2^256\n    // zip215: false follows RFC8032 / NIST186-5 and restricts points to CURVE.p\n    let A, R, SB;\n    try {\n      A = Point.fromHex(publicKey, zip215);\n      R = Point.fromHex(sig.slice(0, len), zip215);\n      SB = G.multiplyUnsafe(s); // 0 <= s < l is done inside\n    } catch (error) {\n      return false;\n    }\n    if (!zip215 && A.isSmallOrder()) return false;\n\n    const k = hashDomainToScalar(context, R.toRawBytes(), A.toRawBytes(), msg);\n    const RkA = R.add(A.multiplyUnsafe(k));\n    // [8][S]B = [8]R + [8][k]A'\n    return RkA.subtract(SB).clearCofactor().equals(Point.ZERO);\n  }\n\n  G._setWindowSize(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n\n  const utils = {\n    getExtendedPublicKey,\n    // ed25519 private keys are uniform 32b. No need to check for modulo bias, like in secp256k1.\n    randomPrivateKey: (): Uint8Array => randomBytes(Fp.BYTES),\n\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3));\n      return point;\n    },\n  };\n\n  return {\n    CURVE,\n    getPublicKey,\n    sign,\n    verify,\n    ExtendedPoint: Point,\n    utils,\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, randomBytes, utf8ToBytes } from '@noble/hashes/utils';\nimport { ExtPointType, twistedEdwards } from './abstract/edwards.js';\nimport { montgomery } from './abstract/montgomery.js';\nimport { Field, FpSqrtEven, isNegativeLE, mod, pow2 } from './abstract/modular.js';\nimport {\n  bytesToHex,\n  bytesToNumberLE,\n  ensureBytes,\n  equalBytes,\n  Hex,\n  numberToBytesLE,\n} from './abstract/utils.js';\nimport { createHasher, htfBasicOpts, expand_message_xmd } from './abstract/hash-to-curve.js';\nimport { AffinePoint } from './abstract/curve.js';\n\n/**\n * ed25519 Twisted Edwards curve with following addons:\n * - X25519 ECDH\n * - Ristretto cofactor elimination\n * - Elligator hash-to-group / point indistinguishability\n */\n\nconst ED25519_P = BigInt(\n  '57896044618658097711785492504343953926634992332820282019728792003956564819949'\n);\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst ED25519_SQRT_M1 = BigInt(\n  '19681161376707505956807079304988542015446066515923890162744021073123829784752'\n);\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _5n = BigInt(5);\n// prettier-ignore\nconst _10n = BigInt(10), _20n = BigInt(20), _40n = BigInt(40), _80n = BigInt(80);\n\nfunction ed25519_pow_2_252_3(x: bigint) {\n  const P = ED25519_P;\n  const x2 = (x * x) % P;\n  const b2 = (x2 * x) % P; // x^3, 11\n  const b4 = (pow2(b2, _2n, P) * b2) % P; // x^15, 1111\n  const b5 = (pow2(b4, _1n, P) * x) % P; // x^31\n  const b10 = (pow2(b5, _5n, P) * b5) % P;\n  const b20 = (pow2(b10, _10n, P) * b10) % P;\n  const b40 = (pow2(b20, _20n, P) * b20) % P;\n  const b80 = (pow2(b40, _40n, P) * b40) % P;\n  const b160 = (pow2(b80, _80n, P) * b80) % P;\n  const b240 = (pow2(b160, _80n, P) * b80) % P;\n  const b250 = (pow2(b240, _10n, P) * b10) % P;\n  const pow_p_5_8 = (pow2(b250, _2n, P) * x) % P;\n  // ^ To pow to (p+3)/8, multiply it by x.\n  return { pow_p_5_8, b2 };\n}\n\nfunction adjustScalarBytes(bytes: Uint8Array): Uint8Array {\n  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n  // set the three least significant bits of the first byte\n  bytes[0] &= 248; // 0b1111_1000\n  // and the most significant bit of the last to zero,\n  bytes[31] &= 127; // 0b0111_1111\n  // set the second most significant bit of the last byte to 1\n  bytes[31] |= 64; // 0b0100_0000\n  return bytes;\n}\n\n// sqrt(u/v)\nfunction uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {\n  const P = ED25519_P;\n  const v3 = mod(v * v * v, P); // v³\n  const v7 = mod(v3 * v3 * v, P); // v⁷\n  // (p+3)/8 and (p-5)/8\n  const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n  let x = mod(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n  const vx2 = mod(v * x * x, P); // vx²\n  const root1 = x; // First root candidate\n  const root2 = mod(x * ED25519_SQRT_M1, P); // Second root candidate\n  const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n  const useRoot2 = vx2 === mod(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n  const noRoot = vx2 === mod(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n  if (useRoot1) x = root1;\n  if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n  if (isNegativeLE(x, P)) x = mod(-x, P);\n  return { isValid: useRoot1 || useRoot2, value: x };\n}\n\n// Just in case\nexport const ED25519_TORSION_SUBGROUP = [\n  '0100000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n  '0000000000000000000000000000000000000000000000000000000000000080',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n  'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n  '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n  '0000000000000000000000000000000000000000000000000000000000000000',\n  'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n];\n\nconst Fp = Field(ED25519_P, undefined, true);\n\nconst ed25519Defaults = {\n  // Param: a\n  a: BigInt(-1), // Fp.create(-1) is proper; our way still works and is faster\n  // d is equal to -121665/121666 over finite field.\n  // Negative number is P - number, and division is invert(number, P)\n  d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n  // Finite field 𝔽p over which we'll do calculations; 2n**255n - 19n\n  Fp,\n  // Subgroup order: how many points curve has\n  // 2n**252n + 27742317777372353535851937790883648493n;\n  n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),\n  // Cofactor\n  h: BigInt(8),\n  // Base point (x, y) aka generator point\n  Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n  Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n  hash: sha512,\n  randomBytes,\n  adjustScalarBytes,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio,\n} as const;\n\nexport const ed25519 = /* @__PURE__ */ twistedEdwards(ed25519Defaults);\n\nfunction ed25519_domain(data: Uint8Array, ctx: Uint8Array, phflag: boolean) {\n  if (ctx.length > 255) throw new Error('Context is too big');\n  return concatBytes(\n    utf8ToBytes('SigEd25519 no Ed25519 collisions'),\n    new Uint8Array([phflag ? 1 : 0, ctx.length]),\n    ctx,\n    data\n  );\n}\n\nexport const ed25519ctx = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n});\nexport const ed25519ph = /* @__PURE__ */ twistedEdwards({\n  ...ed25519Defaults,\n  domain: ed25519_domain,\n  prehash: sha512,\n});\n\nexport const x25519 = /* @__PURE__ */ (() =>\n  montgomery({\n    P: ED25519_P,\n    a: BigInt(486662),\n    montgomeryBits: 255, // n is 253 bits\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (x: bigint): bigint => {\n      const P = ED25519_P;\n      // x^(p-2) aka x^(2^255-21)\n      const { pow_p_5_8, b2 } = ed25519_pow_2_252_3(x);\n      return mod(pow2(pow_p_5_8, BigInt(3), P) * b2, P);\n    },\n    adjustScalarBytes,\n    randomBytes,\n  }))();\n\n/**\n * Converts ed25519 public key to x25519 public key. Uses formula:\n * * `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n * * `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n * @example\n *   const someonesPub = ed25519.getPublicKey(ed25519.utils.randomPrivateKey());\n *   const aPriv = x25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(aPriv, edwardsToMontgomeryPub(someonesPub))\n */\nexport function edwardsToMontgomeryPub(edwardsPub: Hex): Uint8Array {\n  const { y } = ed25519.ExtendedPoint.fromHex(edwardsPub);\n  const _1n = BigInt(1);\n  return Fp.toBytes(Fp.create((_1n + y) * Fp.inv(_1n - y)));\n}\nexport const edwardsToMontgomery = edwardsToMontgomeryPub; // deprecated\n\n/**\n * Converts ed25519 secret key to x25519 secret key.\n * @example\n *   const someonesPub = x25519.getPublicKey(x25519.utils.randomPrivateKey());\n *   const aPriv = ed25519.utils.randomPrivateKey();\n *   x25519.getSharedSecret(edwardsToMontgomeryPriv(aPriv), someonesPub)\n */\nexport function edwardsToMontgomeryPriv(edwardsPriv: Uint8Array): Uint8Array {\n  const hashed = ed25519Defaults.hash(edwardsPriv.subarray(0, 32));\n  return ed25519Defaults.adjustScalarBytes(hashed).subarray(0, 32);\n}\n\n// Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n// NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n// SageMath returns different root first and everything falls apart\n\nconst ELL2_C1 = (Fp.ORDER + BigInt(3)) / BigInt(8); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n\nconst ELL2_C2 = Fp.pow(_2n, ELL2_C1); // 2. c2 = 2^c1\nconst ELL2_C3 = Fp.sqrt(Fp.neg(Fp.ONE)); // 3. c3 = sqrt(-1)\nconst ELL2_C4 = (Fp.ORDER - BigInt(5)) / BigInt(8); // 4. c4 = (q - 5) / 8       # Integer arithmetic\nconst ELL2_J = BigInt(486662);\n\n// prettier-ignore\nfunction map_to_curve_elligator2_curve25519(u: bigint) {\n  let tv1 = Fp.sqr(u);       //  1.  tv1 = u^2\n  tv1 = Fp.mul(tv1, _2n);       //  2.  tv1 = 2 * tv1\n  let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n  let x1n = Fp.neg(ELL2_J);  //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n  let tv2 = Fp.sqr(xd);      //  5.  tv2 = xd^2\n  let gxd = Fp.mul(tv2, xd);    //  6.  gxd = tv2 * xd        # gxd = xd^3\n  let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n  gx1 = Fp.mul(gx1, x1n);       //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n  gx1 = Fp.add(gx1, tv2);       //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n  gx1 = Fp.mul(gx1, x1n);       //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n  let tv3 = Fp.sqr(gxd);     //  11. tv3 = gxd^2\n  tv2 = Fp.sqr(tv3);         //  12. tv2 = tv3^2           # gxd^4\n  tv3 = Fp.mul(tv3, gxd);       //  13. tv3 = tv3 * gxd       # gxd^3\n  tv3 = Fp.mul(tv3, gx1);       //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n  tv2 = Fp.mul(tv2, tv3);       //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n  let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n  y11 = Fp.mul(y11, tv3);       //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n  let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n  tv2 = Fp.sqr(y11);         //  19. tv2 = y11^2\n  tv2 = Fp.mul(tv2, gxd);       //  20. tv2 = tv2 * gxd\n  let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n  let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n  let x2n = Fp.mul(x1n, tv1);   //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n  let y21 = Fp.mul(y11, u);     //  24. y21 = y11 * u\n  y21 = Fp.mul(y21, ELL2_C2);   //  25. y21 = y21 * c2\n  let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n  let gx2 = Fp.mul(gx1, tv1);   //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n  tv2 = Fp.sqr(y21);         //  28. tv2 = y21^2\n  tv2 = Fp.mul(tv2, gxd);       //  29. tv2 = tv2 * gxd\n  let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n  let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n  tv2 = Fp.sqr(y1);          //  32. tv2 = y1^2\n  tv2 = Fp.mul(tv2, gxd);       //  33. tv2 = tv2 * gxd\n  let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n  let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n  let y = Fp.cmov(y2, y1, e3);  //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n  let e4 = Fp.isOdd(y);         //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n  y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n  return { xMn: xn, xMd: xd, yMn: y, yMd: _1n }; //  39. return (xn, xd, y, 1)\n}\n\nconst ELL2_C1_EDWARDS = FpSqrtEven(Fp, Fp.neg(BigInt(486664))); // sgn0(c1) MUST equal 0\nfunction map_to_curve_elligator2_edwards25519(u: bigint) {\n  const { xMn, xMd, yMn, yMd } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n  // map_to_curve_elligator2_curve25519(u)\n  let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n  xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n  let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n  let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n  let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n  let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n  let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n  xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n  xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n  yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n  yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n\n  const inv = Fp.invertBatch([xd, yd]); // batch division\n  return { x: Fp.mul(xn, inv[0]), y: Fp.mul(yn, inv[1]) }; //  13. return (xn, xd, yn, yd)\n}\n\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    ed25519.ExtendedPoint,\n    (scalars: bigint[]) => map_to_curve_elligator2_edwards25519(scalars[0]),\n    {\n      DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n      encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha512,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n\nfunction assertRstPoint(other: unknown) {\n  if (!(other instanceof RistPoint)) throw new Error('RistrettoPoint expected');\n}\n\n// √(-1) aka √(a) aka 2^((p-1)/4)\nconst SQRT_M1 = ED25519_SQRT_M1;\n// √(ad - 1)\nconst SQRT_AD_MINUS_ONE = BigInt(\n  '25063068953384623474111414158702152701244531502492656460079210482610430750235'\n);\n// 1 / √(a-d)\nconst INVSQRT_A_MINUS_D = BigInt(\n  '54469307008909316920995813868745141605393597292927456921205312896311721017578'\n);\n// 1-d²\nconst ONE_MINUS_D_SQ = BigInt(\n  '1159843021668779879193775521855586647937357759715417654439879720876111806838'\n);\n// (d-1)²\nconst D_MINUS_ONE_SQ = BigInt(\n  '40440834346308536858101042469323190826248399146238708352240133220865137265952'\n);\n// Calculates 1/√(number)\nconst invertSqrt = (number: bigint) => uvRatio(_1n, number);\n\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nconst bytes255ToNumberLE = (bytes: Uint8Array) =>\n  ed25519.CURVE.Fp.create(bytesToNumberLE(bytes) & MAX_255B);\n\ntype ExtendedPoint = ExtPointType;\n\n// Computes Elligator map for Ristretto\n// https://ristretto.group/formulas/elligator.html\nfunction calcElligatorRistrettoMap(r0: bigint): ExtendedPoint {\n  const { d } = ed25519.CURVE;\n  const P = ed25519.CURVE.Fp.ORDER;\n  const mod = ed25519.CURVE.Fp.create;\n  const r = mod(SQRT_M1 * r0 * r0); // 1\n  const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n  let c = BigInt(-1); // 3\n  const D = mod((c - d * r) * mod(r + d)); // 4\n  let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D); // 5\n  let s_ = mod(s * r0); // 6\n  if (!isNegativeLE(s_, P)) s_ = mod(-s_);\n  if (!Ns_D_is_sq) s = s_; // 7\n  if (!Ns_D_is_sq) c = r; // 8\n  const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n  const s2 = s * s;\n  const W0 = mod((s + s) * D); // 10\n  const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n  const W2 = mod(_1n - s2); // 12\n  const W3 = mod(_1n + s2); // 13\n  return new ed25519.ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n}\n\n/**\n * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n * but it should work in its own namespace: do not combine those two.\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-ristretto255-decaf448\n */\nclass RistPoint {\n  static BASE: RistPoint;\n  static ZERO: RistPoint;\n  // Private property to discourage combining ExtendedPoint + RistrettoPoint\n  // Always use Ristretto encoding/decoding instead.\n  constructor(private readonly ep: ExtendedPoint) {}\n\n  static fromAffine(ap: AffinePoint<bigint>) {\n    return new RistPoint(ed25519.ExtendedPoint.fromAffine(ap));\n  }\n\n  /**\n   * Takes uniform output of 64-byte hash function like sha512 and converts it to `RistrettoPoint`.\n   * The hash-to-group operation applies Elligator twice and adds the results.\n   * **Note:** this is one-way map, there is no conversion from point to hash.\n   * https://ristretto.group/formulas/elligator.html\n   * @param hex 64-byte output of a hash function\n   */\n  static hashToCurve(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHash', hex, 64);\n    const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new RistPoint(R1.add(R2));\n  }\n\n  /**\n   * Converts ristretto-encoded string to ristretto point.\n   * https://ristretto.group/formulas/decoding.html\n   * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n   */\n  static fromHex(hex: Hex): RistPoint {\n    hex = ensureBytes('ristrettoHex', hex, 32);\n    const { a, d } = ed25519.CURVE;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n    const s = bytes255ToNumberLE(hex);\n    // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n    // 3. Check that s is non-negative, or else abort\n    if (!equalBytes(numberToBytesLE(s, 32), hex) || isNegativeLE(s, P)) throw new Error(emsg);\n    const s2 = mod(s * s);\n    const u1 = mod(_1n + a * s2); // 4 (a is -1)\n    const u2 = mod(_1n - a * s2); // 5\n    const u1_2 = mod(u1 * u1);\n    const u2_2 = mod(u2 * u2);\n    const v = mod(a * d * u1_2 - u2_2); // 6\n    const { isValid, value: I } = invertSqrt(mod(v * u2_2)); // 7\n    const Dx = mod(I * u2); // 8\n    const Dy = mod(I * Dx * v); // 9\n    let x = mod((s + s) * Dx); // 10\n    if (isNegativeLE(x, P)) x = mod(-x); // 10\n    const y = mod(u1 * Dy); // 11\n    const t = mod(x * y); // 12\n    if (!isValid || isNegativeLE(t, P) || y === _0n) throw new Error(emsg);\n    return new RistPoint(new ed25519.ExtendedPoint(x, y, _1n, t));\n  }\n\n  /**\n   * Encodes ristretto point to Uint8Array.\n   * https://ristretto.group/formulas/encoding.html\n   */\n  toRawBytes(): Uint8Array {\n    let { ex: x, ey: y, ez: z, et: t } = this.ep;\n    const P = ed25519.CURVE.Fp.ORDER;\n    const mod = ed25519.CURVE.Fp.create;\n    const u1 = mod(mod(z + y) * mod(z - y)); // 1\n    const u2 = mod(x * y); // 2\n    // Square root always exists\n    const u2sq = mod(u2 * u2);\n    const { value: invsqrt } = invertSqrt(mod(u1 * u2sq)); // 3\n    const D1 = mod(invsqrt * u1); // 4\n    const D2 = mod(invsqrt * u2); // 5\n    const zInv = mod(D1 * D2 * t); // 6\n    let D: bigint; // 7\n    if (isNegativeLE(t * zInv, P)) {\n      let _x = mod(y * SQRT_M1);\n      let _y = mod(x * SQRT_M1);\n      x = _x;\n      y = _y;\n      D = mod(D1 * INVSQRT_A_MINUS_D);\n    } else {\n      D = D2; // 8\n    }\n    if (isNegativeLE(x * zInv, P)) y = mod(-y); // 9\n    let s = mod((z - y) * D); // 10 (check footer's note, no sqrt(-a))\n    if (isNegativeLE(s, P)) s = mod(-s);\n    return numberToBytesLE(s, 32); // 11\n  }\n\n  toHex(): string {\n    return bytesToHex(this.toRawBytes());\n  }\n\n  toString(): string {\n    return this.toHex();\n  }\n\n  // Compare one point to another.\n  equals(other: RistPoint): boolean {\n    assertRstPoint(other);\n    const { ex: X1, ey: Y1 } = this.ep;\n    const { ex: X2, ey: Y2 } = other.ep;\n    const mod = ed25519.CURVE.Fp.create;\n    // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n    const one = mod(X1 * Y2) === mod(Y1 * X2);\n    const two = mod(Y1 * Y2) === mod(X1 * X2);\n    return one || two;\n  }\n\n  add(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.add(other.ep));\n  }\n\n  subtract(other: RistPoint): RistPoint {\n    assertRstPoint(other);\n    return new RistPoint(this.ep.subtract(other.ep));\n  }\n\n  multiply(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiply(scalar));\n  }\n\n  multiplyUnsafe(scalar: bigint): RistPoint {\n    return new RistPoint(this.ep.multiplyUnsafe(scalar));\n  }\n}\nexport const RistrettoPoint = /* @__PURE__ */ (() => {\n  if (!RistPoint.BASE) RistPoint.BASE = new RistPoint(ed25519.ExtendedPoint.BASE);\n  if (!RistPoint.ZERO) RistPoint.ZERO = new RistPoint(ed25519.ExtendedPoint.ZERO);\n  return RistPoint;\n})();\n\n// Hashing to ristretto255. https://www.rfc-editor.org/rfc/rfc9380#appendix-B\nexport const hashToRistretto255 = (msg: Uint8Array, options: htfBasicOpts) => {\n  const d = options.DST;\n  const DST = typeof d === 'string' ? utf8ToBytes(d) : d;\n  const uniform_bytes = expand_message_xmd(msg, DST, 64, sha512);\n  const P = RistPoint.hashToCurve(uniform_bytes);\n  return P;\n};\nexport const hash_to_ristretto255 = hashToRistretto255; // legacy\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import {ed25519} from '@noble/curves/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.ExtendedPoint.fromHex(publicKey);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes(): Uint8Array {\n    const buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return `PublicKey(${this.toString()})`;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n\nexport class TransactionExpiredNonceInvalidError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: the nonce is no longer valid.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredNonceInvalidError.prototype, 'name', {\n  value: 'TransactionExpiredNonceInvalidError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift()!;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift()!;\n    const numReadonlyUnsignedAccounts = byteArray.shift()!;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift()!;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n  NONCE_INVALID,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * Blockhash-based transactions have a lifetime that are defined by\n * the blockhash they include. Any transaction whose blockhash is\n * too old will be rejected.\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Use these options to construct a durable nonce transaction.\n */\nexport type TransactionNonceCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  minContextSlot: number;\n  nonceInfo: NonceInformation;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * If this is a nonce transaction this represents the minimum slot from which\n   * to evaluate if the nonce has advanced when attempting to confirm the\n   * transaction. This protects against a case where the transaction confirmation\n   * logic loads the nonce account from an old slot and assumes the mismatch in\n   * nonce value implies that the nonce has been advanced.\n   */\n  minNonceContextSlot?: number;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  // Construct a transaction using a durable nonce\n  constructor(opts?: TransactionNonceCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?:\n      | TransactionBlockhashCtor\n      | TransactionNonceCtor\n      | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'nonceInfo')) {\n      const {minContextSlot, nonceInfo} = opts as TransactionNonceCtor;\n      this.minNonceContextSlot = minContextSlot;\n      this.nonceInfo = nonceInfo;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      const options = {\n        localeMatcher: 'best fit',\n        usage: 'sort',\n        sensitivity: 'variant',\n        ignorePunctuation: false,\n        numeric: false,\n        caseFirst: 'lower',\n      } as Intl.CollatorOptions;\n      return x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58(), 'en', options);\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number | null> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(requireAllSignatures?: boolean): boolean {\n    return this._verifySignatures(\n      this.serializeMessage(),\n      requireAllSignatures === undefined ? true : requireAllSignatures,\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(\n    signData: Uint8Array,\n    requireAllSignatures: boolean,\n  ): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBytes())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection, SignatureResult} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions &\n    Readonly<{\n      // A signal that, when aborted, cancels any outstanding transaction confirmation operations\n      abortSignal?: AbortSignal;\n    }>,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  let status: SignatureResult;\n  if (\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n  ) {\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          signature: signature,\n          blockhash: transaction.recentBlockhash,\n          lastValidBlockHeight: transaction.lastValidBlockHeight,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else if (\n    transaction.minNonceContextSlot != null &&\n    transaction.nonceInfo != null\n  ) {\n    const {nonceInstruction} = transaction.nonceInfo;\n    const nonceAccountPubkey = nonceInstruction.keys[0].pubkey;\n    status = (\n      await connection.confirmTransaction(\n        {\n          abortSignal: options?.abortSignal,\n          minContextSlot: transaction.minNonceContextSlot,\n          nonceAccountPubkey,\n          nonceValue: transaction.nonceInfo.nonce,\n          signature,\n        },\n        options && options.commitment,\n      )\n    ).value;\n  } else {\n    if (options?.abortSignal != null) {\n      console.warn(\n        'sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was ' +\n          'supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` ' +\n          'or a combination of `nonceInfo` and `minNonceContextSlot` are abortable.',\n      );\n    }\n    status = (\n      await connection.confirmTransaction(\n        signature,\n        options && options.commitment,\n      )\n    ).value;\n  }\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * A durable nonce is a 32 byte value encoded as a base58 string.\n */\nexport type DurableNonce = string;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: DurableNonce;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false,\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {MS_PER_SLOT} from './timing';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      const deployCommitment = 'processed';\n      const finalizeSignature = await connection.sendTransaction(\n        transaction,\n        [payer, program],\n        {preflightCommitment: deployCommitment},\n      );\n      const {context, value} = await connection.confirmTransaction(\n        {\n          signature: finalizeSignature,\n          lastValidBlockHeight: transaction.lastValidBlockHeight!,\n          blockhash: transaction.recentBlockhash!,\n        },\n        deployCommitment,\n      );\n      if (value.err) {\n        throw new Error(\n          `Transaction ${finalizeSignature} failed (${JSON.stringify(value)})`,\n        );\n      }\n      // We prevent programs from being usable until the slot after their deployment.\n      // See https://github.com/solana-labs/solana/pull/29654\n      while (\n        true // eslint-disable-line no-constant-condition\n      ) {\n        try {\n          const currentSlot = await connection.getSlot({\n            commitment: deployCommitment,\n          });\n          if (currentSlot > context.slot) {\n            break;\n          }\n        } catch {\n          /* empty */\n        }\n        await new Promise(resolve =>\n          setTimeout(resolve, Math.round(MS_PER_SLOT / 2)),\n        );\n      }\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a SBF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the SBF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link Connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  (typeof SolanaJSONRPCErrorCode)[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import RpcWebSocketCommonClient from 'rpc-websockets/dist/lib/client';\nimport RpcWebSocketBrowserFactory from 'rpc-websockets/dist/lib/client/websocket.browser';\nimport {\n  ICommonWebSocket,\n  IWSClientAdditionalOptions,\n  NodeWebSocketType,\n  NodeWebSocketTypeOptions,\n} from 'rpc-websockets/dist/lib/client/client.types';\n\nimport createRpc from './rpc-websocket-factory';\n\ninterface IHasReadyState {\n  readyState: WebSocket['readyState'];\n}\n\nexport default class RpcWebSocketClient extends RpcWebSocketCommonClient {\n  private underlyingSocket: IHasReadyState | undefined;\n  constructor(\n    address?: string,\n    options?: IWSClientAdditionalOptions & NodeWebSocketTypeOptions,\n    generate_request_id?: (\n      method: string,\n      params: object | Array<any>,\n    ) => number,\n  ) {\n    const webSocketFactory = (url: string) => {\n      const rpc = createRpc(url, {\n        autoconnect: true,\n        max_reconnects: 5,\n        reconnect: true,\n        reconnect_interval: 1000,\n        ...options,\n      });\n      if ('socket' in rpc) {\n        this.underlyingSocket = (\n          rpc as ReturnType<typeof RpcWebSocketBrowserFactory>\n        ).socket;\n      } else {\n        this.underlyingSocket = rpc as NodeWebSocketType;\n      }\n      return rpc as ICommonWebSocket;\n    };\n    super(webSocketFactory, address, options, generate_request_id);\n  }\n  call(\n    ...args: Parameters<RpcWebSocketCommonClient['call']>\n  ): ReturnType<RpcWebSocketCommonClient['call']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.call(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to call a JSON-RPC method `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n  notify(\n    ...args: Parameters<RpcWebSocketCommonClient['notify']>\n  ): ReturnType<RpcWebSocketCommonClient['notify']> {\n    const readyState = this.underlyingSocket?.readyState;\n    if (readyState === 1 /* WebSocket.OPEN */) {\n      return super.notify(...args);\n    }\n    return Promise.reject(\n      new Error(\n        'Tried to send a JSON-RPC notification `' +\n          args[0] +\n          '` but the socket was not `CONNECTING` or `OPEN` (`readyState` was ' +\n          readyState +\n          ')',\n      ),\n    );\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import HttpKeepAliveAgent, {\n  HttpsAgent as HttpsKeepAliveAgent,\n} from 'agentkeepalive';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport type {Agent as NodeHttpAgent} from 'http';\nimport {Agent as NodeHttpsAgent} from 'https';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {JSONRPCError} from 'jayson';\n\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl from './fetch-impl';\nimport {DurableNonce, NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport RpcWebSocketClient from './rpc-websocket';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredNonceInvalidError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/** @internal */ type SubscriptionStateChangeCallback = (\n  nextState: StatefulSubscription['state'],\n) => void;\n/** @internal */ type SubscriptionStateChangeDisposeFn = () => void;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & BlockhashWithExpiryBlockHeight;\n\n/**\n * A strategy for confirming durable nonce transactions.\n */\nexport type DurableNonceTransactionConfirmationStrategy =\n  BaseTransactionConfirmationStrategy & {\n    /**\n     * The lowest slot at which to fetch the nonce value from the\n     * nonce account. This should be no lower than the slot at\n     * which the last-known value of the nonce was fetched.\n     */\n    minContextSlot: number;\n    /**\n     * The account where the current value of the nonce is stored.\n     */\n    nonceAccountPubkey: PublicKey;\n    /**\n     * The nonce value that was used to sign the transaction\n     * for which confirmation is being sought.\n     */\n    nonceValue: DurableNonce;\n  };\n\n/**\n * Properties shared by all transaction confirmation strategies\n */\nexport type BaseTransactionConfirmationStrategy = Readonly<{\n  /** A signal that, when aborted, cancels any outstanding transaction confirmation operations */\n  abortSignal?: AbortSignal;\n  signature: TransactionSignature;\n}>;\n\n/**\n * This type represents all transaction confirmation strategies\n */\nexport type TransactionConfirmationStrategy =\n  | BlockheightBasedTransactionConfirmationStrategy\n  | DurableNonceTransactionConfirmationStrategy;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n  /**\n   * Whether to populate the rewards array. If parameter not provided, the default includes rewards.\n   */\n  rewards?: boolean;\n  /**\n   * Level of transaction detail to return, either \"full\", \"accounts\", \"signatures\", or \"none\". If\n   * parameter not provided, the default detail level is \"full\". If \"accounts\" are requested,\n   * transaction details only include signatures and an annotated list of accounts in each\n   * transaction. Transaction metadata is limited to only: fee, err, pre_balances, post_balances,\n   * pre_token_balances, and post_token_balances.\n   */\n  transactionDetails?: 'accounts' | 'full' | 'none' | 'signatures';\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `isBlockhashValid` query behavior\n */\nexport type IsBlockhashValidConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n  /** vote account commission when the reward was credited */\n  commission?: number | null;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n        commission: optional(nullable(number())),\n      }),\n    ),\n  ),\n);\n\nexport type RecentPrioritizationFees = {\n  /** slot in which the fee was observed */\n  slot: number;\n  /** the per-compute-unit fee paid by at least one successfully landed transaction, specified in increments of 0.000001 lamports*/\n  prioritizationFee: number;\n};\n\n/**\n * Configuration object for changing `getRecentPrioritizationFees` query behavior\n */\nexport type GetRecentPrioritizationFeesConfig = {\n  /**\n   * If this parameter is provided, the response will reflect a fee to land a transaction locking\n   * all of the provided accounts as writable.\n   */\n  lockedWritableAccounts?: PublicKey[];\n};\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesResult = array(\n  pick({\n    slot: number(),\n    prioritizationFee: number(),\n  }),\n);\n\nexport type InflationRate = {\n  /** total inflation */\n  total: number;\n  /** inflation allocated to validators */\n  validator: number;\n  /** inflation allocated to the foundation */\n  foundation: number;\n  /** epoch for which these values are valid */\n  epoch: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateResult = pick({\n  total: number(),\n  validator: number(),\n  foundation: number(),\n  epoch: number(),\n});\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type AccountsModeBlockResponse = VersionedAccountsModeBlockResponse;\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type NoneModeBlockResponse = VersionedNoneModeBlockResponse;\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `accounts`\n */\nexport type ParsedAccountsModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<ParsedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        ParsedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A block with parsed transactions where the `transactionDetails` mode is `none`\n */\nexport type ParsedNoneModeBlockResponse = Omit<\n  ParsedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n    /** Vote account commission when the reward was credited, only present for voting and staking rewards */\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `accounts`\n */\nexport type VersionedAccountsModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n> & {\n  transactions: Array<\n    Omit<VersionedBlockResponse['transactions'][number], 'transaction'> & {\n      transaction: Pick<\n        VersionedBlockResponse['transactions'][number]['transaction'],\n        'signatures'\n      > & {\n        accountKeys: ParsedMessageAccount[];\n      };\n    }\n  >;\n};\n\n/**\n * A processed block fetched from the RPC API where the `transactionDetails` mode is `none`\n */\nexport type VersionedNoneModeBlockResponse = Omit<\n  VersionedBlockResponse,\n  'transactions'\n>;\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n    commission?: number | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agent: NodeHttpAgent | NodeHttpsAgent | undefined;\n  if (process.env.BROWSER) {\n    if (httpAgent != null) {\n      console.warn(\n        'You have supplied an `httpAgent` when creating a `Connection` in a browser environment.' +\n          'It has been ignored; `httpAgent` is only used in Node environments.',\n      );\n    }\n  } else {\n    if (httpAgent == null) {\n      if (process.env.NODE_ENV !== 'test') {\n        const agentOptions = {\n          // One second fewer than the Solana RPC's keepalive timeout.\n          // Read more: https://github.com/solana-labs/solana/issues/27859#issuecomment-1340097889\n          freeSocketTimeout: 19000,\n          keepAlive: true,\n          maxSockets: 25,\n        };\n        if (url.startsWith('https:')) {\n          agent = new HttpsKeepAliveAgent(agentOptions);\n        } else {\n          agent = new HttpKeepAliveAgent(agentOptions);\n        }\n      }\n    } else {\n      if (httpAgent !== false) {\n        const isHttps = url.startsWith('https:');\n        if (isHttps && !(httpAgent instanceof NodeHttpsAgent)) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `https.Agent`. You have, instead, supplied an ' +\n              '`http.Agent` through `httpAgent`.',\n          );\n        } else if (!isHttps && httpAgent instanceof NodeHttpsAgent) {\n          throw new Error(\n            'The endpoint `' +\n              url +\n              '` can only be paired with an `http.Agent`. You have, instead, supplied an ' +\n              '`https.Agent` through `httpAgent`.',\n          );\n        }\n        agent = httpAgent;\n      }\n    }\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getInflationRate\" message\n */\nconst GetInflationRateRpcResult = jsonRpcResult(GetInflationRateResult);\n\n/**\n * Expected JSON RPC response for the \"getRecentPrioritizationFees\" message\n */\nconst GetRecentPrioritizationFeesRpcResult = jsonRpcResult(\n  GetRecentPrioritizationFeesResult,\n);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst AnnotatedAccountKey = pick({\n  pubkey: PublicKeyFromString,\n  signer: boolean(),\n  writable: boolean(),\n  source: optional(union([literal('transaction'), literal('lookupTable')])),\n});\n\nconst ConfirmedTransactionAccountsModeResult = pick({\n  accountKeys: array(AnnotatedAccountKey),\n  signatures: array(string()),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(AnnotatedAccountKey),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/** @internal */\nconst RewardsResult = pick({\n  pubkey: string(),\n  lamports: number(),\n  postBalance: nullable(number()),\n  rewardType: nullable(string()),\n  commission: optional(nullable(number())),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `none`\n */\nconst GetNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message when `transactionDetails` is `accounts`\n */\nconst GetAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `accounts`\n */\nconst GetParsedAccountsModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionAccountsModeResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message  when `transactionDetails` is `none`\n */\nconst GetParsedNoneModeBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(array(RewardsResult)),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"isBlockhashValid\" message\n */\nconst IsBlockhashValidRpcResult = jsonRpcResultAndContext(boolean());\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** wrap the result in an RpcResponse JSON object */\n  withContext?: boolean;\n};\n\nexport type GetProgramAccountsResponse = readonly Readonly<{\n  account: AccountInfo<Buffer>;\n  /** the account Pubkey as base-58 encoded string */\n  pubkey: PublicKey;\n}>[];\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonce`\n */\nexport type GetNonceConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getNonceAndContext`\n */\nexport type GetNonceAndContextConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** Cluster confirmation status, if available. Possible values: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /**\n   * An `http.Agent` that will be used to manage socket connections (eg. to implement connection\n   * persistence). Set this to `false` to create a connection that uses no agent. This applies to\n   * Node environments only.\n   */\n  httpAgent?: NodeHttpAgent | NodeHttpsAgent | false;\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionHashByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionConfigHash\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionStateChangeCallbacksByHash: {\n    [hash: SubscriptionConfigHash]:\n      | Set<SubscriptionStateChangeCallback>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    let httpAgent;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n      httpAgent = commitmentOrConfig.httpAgent;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n      httpAgent,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<GetProgramAccountsResponse>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment: GetProgramAccountsConfig &\n      Readonly<{withContext: true}>,\n  ): Promise<RpcResponseAndContext<GetProgramAccountsResponse>>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<GetProgramAccountsResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<\n    | GetProgramAccountsResponse\n    | RpcResponseAndContext<GetProgramAccountsResponse>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const baseSchema = array(KeyedAccountInfoResult);\n    const res =\n      configWithoutEncoding.withContext === true\n        ? create(unsafeRes, jsonRpcResultAndContext(baseSchema))\n        : create(unsafeRes, jsonRpcResult(baseSchema));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: TransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` and pass in {@link TransactionConfirmationStrategy} */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy: TransactionConfirmationStrategy | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config = strategy as TransactionConfirmationStrategy;\n\n      if (config.abortSignal?.aborted) {\n        return Promise.reject(config.abortSignal.reason);\n      }\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    if (typeof strategy === 'string') {\n      return await this.confirmTransactionUsingLegacyTimeoutStrategy({\n        commitment: commitment || this.commitment,\n        signature: rawSignature,\n      });\n    } else if ('lastValidBlockHeight' in strategy) {\n      return await this.confirmTransactionUsingBlockHeightExceedanceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    } else {\n      return await this.confirmTransactionUsingDurableNonceStrategy({\n        commitment: commitment || this.commitment,\n        strategy,\n      });\n    }\n  }\n\n  private getCancellationPromise(signal?: AbortSignal): Promise<never> {\n    return new Promise<never>((_, reject) => {\n      if (signal == null) {\n        return;\n      }\n      if (signal.aborted) {\n        reject(signal.reason);\n      } else {\n        signal.addEventListener('abort', () => {\n          reject(signal.reason);\n        });\n      }\n    });\n  }\n\n  private getTransactionConfirmationPromise({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }): {\n    abortConfirmation(): void;\n    confirmationPromise: Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>;\n  } {\n    let signatureSubscriptionId: number | undefined;\n    let disposeSignatureSubscriptionStateChangeObserver:\n      | SubscriptionStateChangeDisposeFn\n      | undefined;\n    let done = false;\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        signatureSubscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            signatureSubscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          commitment,\n        );\n        const subscriptionSetupPromise = new Promise<void>(\n          resolveSubscriptionSetup => {\n            if (signatureSubscriptionId == null) {\n              resolveSubscriptionSetup();\n            } else {\n              disposeSignatureSubscriptionStateChangeObserver =\n                this._onSubscriptionStateChange(\n                  signatureSubscriptionId,\n                  nextState => {\n                    if (nextState === 'subscribed') {\n                      resolveSubscriptionSetup();\n                    }\n                  },\n                );\n            }\n          },\n        );\n        (async () => {\n          await subscriptionSetupPromise;\n          if (done) return;\n          const response = await this.getSignatureStatus(signature);\n          if (done) return;\n          if (response == null) {\n            return;\n          }\n          const {context, value} = response;\n          if (value == null) {\n            return;\n          }\n          if (value?.err) {\n            reject(value.err);\n          } else {\n            switch (commitment) {\n              case 'confirmed':\n              case 'single':\n              case 'singleGossip': {\n                if (value.confirmationStatus === 'processed') {\n                  return;\n                }\n                break;\n              }\n              case 'finalized':\n              case 'max':\n              case 'root': {\n                if (\n                  value.confirmationStatus === 'processed' ||\n                  value.confirmationStatus === 'confirmed'\n                ) {\n                  return;\n                }\n                break;\n              }\n              // exhaust enums to ensure full coverage\n              case 'processed':\n              case 'recent':\n            }\n            done = true;\n            resolve({\n              __type: TransactionStatus.PROCESSED,\n              response: {\n                context,\n                value,\n              },\n            });\n          }\n        })();\n      } catch (err) {\n        reject(err);\n      }\n    });\n    const abortConfirmation = () => {\n      if (disposeSignatureSubscriptionStateChangeObserver) {\n        disposeSignatureSubscriptionStateChangeObserver();\n        disposeSignatureSubscriptionStateChangeObserver = undefined;\n      }\n      if (signatureSubscriptionId != null) {\n        this.removeSignatureListener(signatureSubscriptionId);\n        signatureSubscriptionId = undefined;\n      }\n    };\n    return {abortConfirmation, confirmationPromise};\n  }\n\n  private async confirmTransactionUsingBlockHeightExceedanceStrategy({\n    commitment,\n    strategy: {abortSignal, lastValidBlockHeight, signature},\n  }: {\n    commitment?: Commitment;\n    strategy: BlockheightBasedTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.BLOCKHEIGHT_EXCEEDED;\n    }>(resolve => {\n      const checkBlockHeight = async () => {\n        try {\n          const blockHeight = await this.getBlockHeight(commitment);\n          return blockHeight;\n        } catch (_e) {\n          return -1;\n        }\n      };\n      (async () => {\n        let currentBlockHeight = await checkBlockHeight();\n        if (done) return;\n        while (currentBlockHeight <= lastValidBlockHeight) {\n          await sleep(1000);\n          if (done) return;\n          currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n        }\n        resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredBlockheightExceededError(signature);\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingDurableNonceStrategy({\n    commitment,\n    strategy: {\n      abortSignal,\n      minContextSlot,\n      nonceAccountPubkey,\n      nonceValue,\n      signature,\n    },\n  }: {\n    commitment?: Commitment;\n    strategy: DurableNonceTransactionConfirmationStrategy;\n  }) {\n    let done: boolean = false;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.NONCE_INVALID;\n      slotInWhichNonceDidAdvance: number | null;\n    }>(resolve => {\n      let currentNonceValue: string | undefined = nonceValue;\n      let lastCheckedSlot: number | null = null;\n      const getCurrentNonceValue = async () => {\n        try {\n          const {context, value: nonceAccount} = await this.getNonceAndContext(\n            nonceAccountPubkey,\n            {\n              commitment,\n              minContextSlot,\n            },\n          );\n          lastCheckedSlot = context.slot;\n          return nonceAccount?.nonce;\n        } catch (e) {\n          // If for whatever reason we can't reach/read the nonce\n          // account, just keep using the last-known value.\n          return currentNonceValue;\n        }\n      };\n      (async () => {\n        currentNonceValue = await getCurrentNonceValue();\n        if (done) return;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          if (nonceValue !== currentNonceValue) {\n            resolve({\n              __type: TransactionStatus.NONCE_INVALID,\n              slotInWhichNonceDidAdvance: lastCheckedSlot,\n            });\n            return;\n          }\n          await sleep(2000);\n          if (done) return;\n          currentNonceValue = await getCurrentNonceValue();\n          if (done) return;\n        }\n      })();\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({commitment, signature});\n    const cancellationPromise = this.getCancellationPromise(abortSignal);\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([\n        cancellationPromise,\n        confirmationPromise,\n        expiryPromise,\n      ]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        // Double check that the transaction is indeed unconfirmed.\n        let signatureStatus:\n          | RpcResponseAndContext<SignatureStatus | null>\n          | null\n          | undefined;\n        while (\n          true // eslint-disable-line no-constant-condition\n        ) {\n          const status = await this.getSignatureStatus(signature);\n          if (status == null) {\n            break;\n          }\n          if (\n            status.context.slot <\n            (outcome.slotInWhichNonceDidAdvance ?? minContextSlot)\n          ) {\n            await sleep(400);\n            continue;\n          }\n          signatureStatus = status;\n          break;\n        }\n        if (signatureStatus?.value) {\n          const commitmentForStatus = commitment || 'finalized';\n          const {confirmationStatus} = signatureStatus.value;\n          switch (commitmentForStatus) {\n            case 'processed':\n            case 'recent':\n              if (\n                confirmationStatus !== 'processed' &&\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'confirmed':\n            case 'single':\n            case 'singleGossip':\n              if (\n                confirmationStatus !== 'confirmed' &&\n                confirmationStatus !== 'finalized'\n              ) {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            case 'finalized':\n            case 'max':\n            case 'root':\n              if (confirmationStatus !== 'finalized') {\n                throw new TransactionExpiredNonceInvalidError(signature);\n              }\n              break;\n            default:\n              // Exhaustive switch.\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              ((_: never) => {})(commitmentForStatus);\n          }\n          result = {\n            context: signatureStatus.context,\n            value: {err: signatureStatus.value.err},\n          };\n        } else {\n          throw new TransactionExpiredNonceInvalidError(signature);\n        }\n      }\n    } finally {\n      done = true;\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  private async confirmTransactionUsingLegacyTimeoutStrategy({\n    commitment,\n    signature,\n  }: {\n    commitment?: Commitment;\n    signature: string;\n  }) {\n    let timeoutId;\n    const expiryPromise = new Promise<{\n      __type: TransactionStatus.TIMED_OUT;\n      timeoutMs: number;\n    }>(resolve => {\n      let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n      switch (commitment) {\n        case 'processed':\n        case 'recent':\n        case 'single':\n        case 'confirmed':\n        case 'singleGossip': {\n          timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n          break;\n        }\n        // exhaust enums to ensure full coverage\n        case 'finalized':\n        case 'max':\n        case 'root':\n      }\n      timeoutId = setTimeout(\n        () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n        timeoutMs,\n      );\n    });\n    const {abortConfirmation, confirmationPromise} =\n      this.getTransactionConfirmationPromise({\n        commitment,\n        signature,\n      });\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      if (outcome.__type === TransactionStatus.PROCESSED) {\n        result = outcome.response;\n      } else {\n        throw new TransactionExpiredTimeoutError(\n          signature,\n          outcome.timeoutMs / 1000,\n        );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      abortConfirmation();\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the specific inflation values for the current epoch\n   */\n  async getInflationRate(): Promise<InflationRate> {\n    const unsafeRes = await this._rpcRequest('getInflationRate', []);\n    const res = create(unsafeRes, GetInflationRateRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation rate');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(commitment?: Commitment): Promise<\n    RpcResponseAndContext<{\n      blockhash: Blockhash;\n      feeCalculator: FeeCalculator;\n    }>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: VersionedMessage,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number | null>> {\n    const wireMessage = toBuffer(message.serialize()).toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of prioritization fees from recent blocks.\n   */\n  async getRecentPrioritizationFees(\n    config?: GetRecentPrioritizationFeesConfig,\n  ): Promise<RecentPrioritizationFees[]> {\n    const accounts = config?.lockedWritableAccounts?.map(key => key.toBase58());\n    const args = accounts?.length ? [accounts] : [];\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPrioritizationFees',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPrioritizationFeesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent prioritization fees',\n      );\n    }\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns whether a blockhash is still valid or not\n   */\n  async isBlockhashValid(\n    blockhash: Blockhash,\n    rawConfig?: IsBlockhashValidConfig,\n  ): Promise<RpcResponseAndContext<boolean>> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgs(\n      [blockhash],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('isBlockhashValid', args);\n    const res = create(unsafeRes, IsBlockhashValidRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to determine if the blockhash `' + blockhash + '`is valid',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<AccountsModeBlockResponse | null>;\n\n  /**\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetBlockConfig & {transactionDetails: 'none'},\n  ): Promise<NoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<VersionedAccountsModeBlockResponse | null>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<VersionedNoneModeBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | VersionedBlockResponse\n    | VersionedAccountsModeBlockResponse\n    | VersionedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          const {result} = res;\n          return result\n            ? {\n                ...result,\n                transactions: result.transactions.map(\n                  ({transaction, meta, version}) => ({\n                    meta,\n                    transaction: {\n                      ...transaction,\n                      message: versionedMessageFromResponse(\n                        version,\n                        transaction.message,\n                      ),\n                    },\n                    version,\n                  }),\n                ),\n              }\n            : null;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(\n        e as JSONRPCError,\n        'failed to get confirmed block',\n      );\n    }\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'accounts'},\n  ): Promise<ParsedAccountsModeBlockResponse>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig: GetVersionedBlockConfig & {transactionDetails: 'none'},\n  ): Promise<ParsedNoneModeBlockResponse>;\n  // eslint-disable-next-line no-dupe-class-members\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<\n    | ParsedBlockResponse\n    | ParsedAccountsModeBlockResponse\n    | ParsedNoneModeBlockResponse\n    | null\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    try {\n      switch (config?.transactionDetails) {\n        case 'accounts': {\n          const res = create(unsafeRes, GetParsedAccountsModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        case 'none': {\n          const res = create(unsafeRes, GetParsedNoneModeBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n        default: {\n          const res = create(unsafeRes, GetParsedBlockRpcResult);\n          if ('error' in res) {\n            throw res.error;\n          }\n          return res.result;\n        }\n      }\n    } catch (e) {\n      throw new SolanaJSONRPCError(e as JSONRPCError, 'failed to get block');\n    }\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  getBlockHeight = (() => {\n    const requestPromises: {[hash: string]: Promise<number>} = {};\n    return async (\n      commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n    ): Promise<number> => {\n      const {commitment, config} =\n        extractCommitmentFromConfig(commitmentOrConfig);\n      const args = this._buildArgs(\n        [],\n        commitment,\n        undefined /* encoding */,\n        config,\n      );\n      const requestHash = fastStableStringify(args);\n      requestPromises[requestHash] =\n        requestPromises[requestHash] ??\n        (async () => {\n          try {\n            const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n            const res = create(unsafeRes, jsonRpcResult(number()));\n            if ('error' in res) {\n              throw new SolanaJSONRPCError(\n                res.error,\n                'failed to get block height information',\n              );\n            }\n            return res.result;\n          } finally {\n            delete requestPromises[requestHash];\n          }\n        })();\n      return await requestPromises[requestHash];\n    };\n  })();\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceAndContextConfig,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitmentOrConfig,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitmentOrConfig?: Commitment | GetNonceConfig,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, signersOrOptions);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      (async () => {\n        try {\n          await this._rpcWebSocket.notify('ping');\n          // eslint-disable-next-line no-empty\n        } catch {}\n      })();\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._setSubscription(hash, {\n        ...subscription,\n        state: 'pending',\n      });\n    });\n  }\n\n  /**\n   * @internal\n   */\n  private _setSubscription(\n    hash: SubscriptionConfigHash,\n    nextSubscription: Subscription,\n  ) {\n    const prevState = this._subscriptionsByHash[hash]?.state;\n    this._subscriptionsByHash[hash] = nextSubscription;\n    if (prevState !== nextSubscription.state) {\n      const stateChangeCallbacks =\n        this._subscriptionStateChangeCallbacksByHash[hash];\n      if (stateChangeCallbacks) {\n        stateChangeCallbacks.forEach(cb => {\n          try {\n            cb(nextSubscription.state);\n            // eslint-disable-next-line no-empty\n          } catch {}\n        });\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private _onSubscriptionStateChange(\n    clientSubscriptionId: ClientSubscriptionId,\n    callback: SubscriptionStateChangeCallback,\n  ): SubscriptionStateChangeDisposeFn {\n    const hash =\n      this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n    if (hash == null) {\n      return () => {};\n    }\n    const stateChangeCallbacks = (this._subscriptionStateChangeCallbacksByHash[\n      hash\n    ] ||= new Set());\n    stateChangeCallbacks.add(callback);\n    return () => {\n      stateChangeCallbacks.delete(callback);\n      if (stateChangeCallbacks.size === 0) {\n        delete this._subscriptionStateChangeCallbacksByHash[hash];\n      }\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'subscribing',\n                });\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._setSubscription(hash, {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                });\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'pending',\n                });\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  this._setSubscription(hash, {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  });\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._setSubscription(hash, {\n                      ...subscription,\n                      state: 'subscribed',\n                    });\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._setSubscription(hash, {\n                  ...subscription,\n                  state: 'unsubscribed',\n                });\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionHashByClientSubscriptionId[clientSubscriptionId] = hash;\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param {Ed25519Keypair} keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   *\n   * @returns {Keypair} Keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options skip secret key validation\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   *\n   * @returns {Keypair} Keypair\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   *\n   * @returns {PublicKey} PublicKey\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   * @returns {Uint8Array} Secret key in an array of Uint8 bytes\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {secp256k1} from '@noble/curves/secp256k1';\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.sign>[0],\n  privKey: Parameters<typeof secp256k1.sign>[1],\n) => {\n  const signature = secp256k1.sign(msgHash, privKey);\n  return [signature.toCompactRawBytes(), signature.recovery!] as const;\n};\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false,\n      });\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   *\n   * KEEP IN SYNC WITH `VoteState::size_of()` in https://github.com/solana-labs/solana/blob/a474cb24b9238f5edcc982f65c0b37d4a1046f7e/sdk/program/src/vote/state/mod.rs#L340-L342\n   */\n  static space: number = process.env.TEST_LIVE ? 3762 : 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = (typeof CHAIN_NAMESPACES)[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = (typeof ADAPTER_NAMESPACES)[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n  /**\n   * Number of decimals for the currency ticker (e.g: 18)\n   */\n  decimals?: number;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n    5115: \"User has already enabled mfa, please use the @web3auth/web3auth-web sdk for login with mfa\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}. ${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n\n  public static mfaEnabled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5115, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = (typeof WALLET_ADAPTERS)[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = (typeof SOLANA_ADAPTERS)[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = (typeof EVM_ADAPTERS)[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = (typeof MULTI_CHAIN_ADAPTERS)[keyof typeof MULTI_CHAIN_ADAPTERS];\n\nexport const ADAPTER_NAMES = {\n  [MULTI_CHAIN_ADAPTERS.OPENLOGIN]: \"OpenLogin\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V1]: \"Wallet Connect v1\",\n  [MULTI_CHAIN_ADAPTERS.WALLET_CONNECT_V2]: \"Wallet Connect v2\",\n  [SOLANA_ADAPTERS.TORUS_SOLANA]: \"Torus\",\n  [SOLANA_ADAPTERS.PHANTOM]: \"Phantom\",\n  [SOLANA_ADAPTERS.SOLFLARE]: \"Solflare\",\n  [SOLANA_ADAPTERS.SLOPE]: \"Slope\",\n  [EVM_ADAPTERS.TORUS_EVM]: \"Torus\",\n  [EVM_ADAPTERS.METAMASK]: \"Metamask\",\n  [EVM_ADAPTERS.COINBASE]: \"Coinbase\",\n};\n","import { OPENLOGIN_NETWORK, OPENLOGIN_NETWORK_TYPE, OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = (typeof ADAPTER_CATEGORY)[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = (typeof ADAPTER_STATUS)[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\n\nexport interface BaseAdapterSettings {\n  clientId?: string;\n  sessionTime?: number;\n  chainConfig?: Partial<CustomChainConfig> & Pick<CustomChainConfig, \"chainNamespace\">;\n  web3AuthNetwork?: OPENLOGIN_NETWORK_TYPE;\n  useCoreKitKey?: boolean;\n}\n\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  web3AuthNetwork: OPENLOGIN_NETWORK_TYPE;\n  clientId: string;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setAdapterSettings(adapterSettings: BaseAdapterSettings): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  public clientId: string;\n\n  public web3AuthNetwork: OPENLOGIN_NETWORK_TYPE = OPENLOGIN_NETWORK.MAINNET;\n\n  protected rehydrated = false;\n\n  // should be added in constructor or from setAdapterSettings function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  constructor(options: BaseAdapterSettings = {}) {\n    super();\n    this.setAdapterSettings(options);\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  public setAdapterSettings(options: BaseAdapterSettings): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n    if (options?.web3AuthNetwork) {\n      this.web3AuthNetwork = options.web3AuthNetwork;\n    }\n    const customChainConfig = options.chainConfig;\n    if (customChainConfig) {\n      if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n      this.currentChainNamespace = customChainConfig.chainNamespace;\n      // chainId is optional in this function.\n      // we go with mainnet chainId by default.\n      const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n      // NOTE: It is being forced casted to CustomChainConfig to handle OTHER Chainnamespace\n      // where chainConfig is not required.\n      const finalChainConfig = { ...(defaultChainConfig || {}), ...customChainConfig } as CustomChainConfig;\n\n      this.chainConfig = finalChainConfig;\n    }\n  }\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n  }\n\n  checkInitializationRequirements(): void {\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"Please initialize Web3Auth with a valid clientId in constructor\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    if (!this.chainConfig.rpcTarget && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n    }\n\n    if (!this.chainConfig.chainId && this.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n      throw WalletInitializationError.invalidParams(\"chainID is required in chainConfig\");\n    }\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  checkDisconnectionRequirements(): void {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","export function storageAvailable(type: \"sessionStorage\" | \"localStorage\"): boolean {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage: Storage;\n  try {\n    storage = (window as any)[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const _error = error as DOMException;\n    return !!(\n      _error &&\n      // everything except Firefox\n      (_error.code === 22 ||\n        // Firefox\n        _error.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        _error.name === \"QuotaExceededError\" ||\n        // Firefox\n        _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storageExists &&\n      storageLength !== 0\n    );\n  }\n}\n\nexport const isHexStrict = (hex: string): boolean => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { TransactionOrVersionedTransaction } from \"../interface\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<TransactionOrVersionedTransaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>) => Promise<TransactionOrVersionedTransaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, TransactionOrVersionedTransaction>(\n      \"signTransaction\",\n      signTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction }, { signature: string }>(\n      \"signAndSendTransaction\",\n      signAndSendTransaction\n    ),\n    createGenericJRPCMiddleware<{ message: TransactionOrVersionedTransaction[] }, TransactionOrVersionedTransaction[]>(\n      \"signAllTransactions\",\n      signAllTransactions\n    ),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"private_key\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { Connection, PublicKey, Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nconst isVersionTransction = (transaction: TransactionOrVersionedTransaction) =>\n  (transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction;\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n\n      const message = isVersionTransction(txMessage)\n        ? (txMessage as VersionedTransaction).message.serialize()\n        : (txMessage as Transaction).serializeMessage();\n      const { data } = await injectedProvider.signTransaction(bs58.encode(message));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, Buffer.from(signature));\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        const item = allTxns[i];\n        const message = isVersionTransction(item) ? (item as VersionedTransaction).message.serialize() : (item as Transaction).serializeMessage();\n        unsignedTx.push(bs58.encode(message));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, Buffer.from(signature));\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (\n    req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>\n  ): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider, TransactionOrVersionedTransaction } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 9,\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Keypair, VersionedTransaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { TransactionOrVersionedTransaction } from \"../../interface\";\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<TransactionOrVersionedTransaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n        (transaction as VersionedTransaction).sign([keyPair]);\n      } else {\n        transaction.partialSign(keyPair);\n      }\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [Buffer.from(transaction.serialize()).toString(\"base64\"), { encoding: \"base64\" }],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: TransactionOrVersionedTransaction[] }>): Promise<TransactionOrVersionedTransaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        if ((transaction as VersionedTransaction).version !== undefined || transaction instanceof VersionedTransaction) {\n          (transaction as VersionedTransaction).sign([keyPair]);\n        } else {\n          transaction.partialSign(keyPair);\n        }\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet, TransactionOrVersionedTransaction } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction<T extends TransactionOrVersionedTransaction>(transaction: T): Promise<T> {\n    const signedTransaction = await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return signedTransaction as T;\n  }\n\n  public async signAllTransactions<T extends TransactionOrVersionedTransaction>(transactions: T[]): Promise<T[]> {\n    const signedTransactions = await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    });\n    return signedTransactions as T[];\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// @ts-ignore\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n  var _super = _createSuper(CommonClient);\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n    var _a$autoconnect = _a.autoconnect,\n      autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n      _a$reconnect = _a.reconnect,\n      reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n      _a$reconnect_interval = _a.reconnect_interval,\n      reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n      _a$max_reconnects = _a.max_reconnects,\n      max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n      rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_timer_id = undefined;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n        var rpc_id = _this2.generate_request_id(method, params);\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n              case 2:\n                resp = _context.sent;\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new Error(\"authentication failed\");\n              case 5:\n                return _context.abrupt(\"return\", resp);\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n              case 3:\n                result = _context3.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n              case 6:\n                return _context3.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n              case 3:\n                result = _context4.sent;\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n              case 6:\n                return _context4.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n        _this4.emit(\"open\");\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        }\n        // check if any listeners are attached and forward event\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else\n            // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            }\n          // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n          return;\n        }\n        // reject early since server's response is invalid\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n          reason = _ref2.reason;\n        if (_this4.ready)\n          // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) _this4.reconnect_timer_id = setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _eventemitter = require(\"eventemitter3\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n  var _super = _createSuper(WebSocketBrowserImpl);\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["buffer_1","require","checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","Buffer","from","buffer","byteOffset","length","Layout","constructor","span","property","Number","isInteger","makeDestinationObject","getSpan","offset","RangeError","replicate","rv","Object","create","prototype","assign","fromArray","values","nameWithProperty","name","lo","ExternalLayout","isCount","Error","GreedyCount","elementSpan","arguments","undefined","decode","rem","Math","floor","encode","src","OffsetLayout","layout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","idx","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","layoutFor","offsetOf","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","addVariant","variant","VariantLayout","vb","union","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","addField","bits","bf","BitField","addBoolean","Boolean","fieldFor","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","_0n","BigInt","_1n","_2n","_8n","VERIFY_DEFAULT","zip215","twistedEdwards","curveDef","CURVE","curve","opts","validateBasic","ut","hash","a","d","randomBytes","adjustScalarBytes","domain","uvRatio","mapToCurve","freeze","validateOpts","Fp","n","CURVE_ORDER","prehash","cHash","nByteLength","h","cofactor","MASK","modP","u","isValid","sqrt","inv","bytes","data","ctx","phflag","inBig","inRange","max","in0MaskRange","assertInRange","concat","assertGE0","pointPrecomputes","Map","isPoint","other","Point","ex","ey","ez","et","x","this","toAffine","y","fromAffine","p","normalizeZ","points","toInv","invertBatch","map","_setWindowSize","windowSize","_WINDOW_SIZE","delete","assertValidity","is0","X","Y","Z","T","X2","Y2","Z2","Z4","aX2","equals","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","ZERO","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","subtract","wNAF","wnaf","wNAFCached","multiply","scalar","f","multiplyUnsafe","I","unsafeLadder","isSmallOrder","isTorsionFree","iz","z","ax","ay","zz","clearCofactor","fromHex","hex","len","BYTES","normed","ensureBytes","lastByte","ORDER","y2","isXOdd","isLastByteOdd","fromPrivateKey","privKey","getExtendedPublicKey","point","toRawBytes","toHex","BASE","Gx","Gy","modN","mod","modN_LE","key","hashed","head","prefix","pointBytes","hashDomainToScalar","context","_len","msgs","_key","msg","verifyOpts","utils","randomPrivateKey","precompute","getPublicKey","sign","options","r","R","s","res","verify","sig","publicKey","SB","error","k","ExtendedPoint","ED25519_P","ED25519_SQRT_M1","_5n","_10n","_20n","_40n","_80n","ed25519_pow_2_252_3","P","b2","b4","pow2","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","vx2","root1","root2","useRoot1","useRoot2","noRoot","isNegativeLE","Field","ed25519Defaults","sha512","ed25519","ed25519_domain","concatBytes","utf8ToBytes","ELL2_C1","neg","ONE","FpSqrtEven","StructError","failure","failures","cached","message","rest","path","super","join","_cached","isObject","print","JSON","stringify","toFailure","result","struct","branch","type","refinement","toFailures","Symbol","iterator","run","coerce","mask","coercer","schema","valid","validator","entries","ts","t","set","Set","refiner","Struct","props","assert","validate","is","tuples","tuple","input","done","next","shiftIterator","define","array","Element","boolean","instance","Class","literal","constant","description","never","nullable","number","isNaN","optional","record","Key","Value","string","Elements","Never","keys","Structs","S","first","unknown","condition","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","arr","isBuffer","byteLength","properties","serialize","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","_Symbol$toStringTag","toStringTag","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","unique","eq","toBase58","toBytes","toJSON","buf","toArrayLike","zeroPad","alloc","createWithSeed","fromPublicKey","seed","programId","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","createProgramAddress","findProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddress","pubkeyData","_class","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","signature","defineProperty","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","TransactionExpiredNonceInvalidError","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","str","chars","getAlloc","getItemAlloc","item","field","decodeLength","size","elem","encodeLength","rem_len","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","writableSigners","filter","_ref","readonlySigners","_ref2","writableNonSigners","_ref3","readonlyNonSigners","_ref4","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","_ref5","_ref6","_ref7","_ref8","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","byteArray","accountCount","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","_ref9","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","minNonceContextSlot","_message","_json","minContextSlot","blockhash","nonceInstruction","signers","_ref10","items","compileMessage","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","localeMatcher","usage","sensitivity","ignorePunctuation","numeric","caseFirst","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","_ref11","indexOf","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","_len2","_key2","seen","_len3","_key3","uniqueSigners","signer","_partialSign","partialSign","_len4","_key4","_len5","_key5","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","_verifySignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","_ref12","keyObj","populate","sigPubkeyPair","some","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","async","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","status","confirmTransaction","abortSignal","nonceAccountPubkey","nonceValue","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","createAccount","params","lamports","space","fromPubkey","newAccountPubkey","transfer","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","owner","dataLayout","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","deployCommitment","finalizeSignature","getSlot","slot","round","MS_PER_SLOT","objToString","objKeys","obj","val","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","_ref13","customMessage","code","fetchImpl","globalThis","fetch","RpcWebSocketClient","RpcWebSocketCommonClient","generate_request_id","url","rpc","createRpc","autoconnect","max_reconnects","reconnect","reconnect_interval","underlyingSocket","socket","_this$underlyingSocke","readyState","reject","notify","_this$underlyingSocke2","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","commission","GetRecentPrioritizationFeesResult","prioritizationFee","GetInflationRateResult","total","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetInflationRateRpcResult","GetRecentPrioritizationFeesRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","AnnotatedAccountKey","source","ConfirmedTransactionAccountsModeResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","RewardsResult","rewardType","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","GetNoneModeBlockRpcResult","GetAccountsModeBlockRpcResult","GetParsedBlockRpcResult","GetParsedAccountsModeBlockRpcResult","GetParsedNoneModeBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","IsBlockhashValidRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","_commitmentOrConfig","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","httpAgent","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionHashByClientSubscriptionId","_subscriptionStateChangeCallbacksByHash","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","getBlockHeight","requestPromises","_requestPromises$requ","_buildArgs","requestHash","fastStableStringify$1","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","parseInt","websocketPort","makeWebsocketUrl","customFetch","fetchWithMiddleware","info","init","modifiedFetchArgs","modifiedInfo","modifiedInit","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","client","createRpcRequest","requests","batch","methodName","createRpcBatchRequest","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","getBalance","then","catch","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","unsafeRes","baseSchema","withContext","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","_config$abortSignal","aborted","reason","confirmTransactionUsingLegacyTimeoutStrategy","confirmTransactionUsingBlockHeightExceedanceStrategy","confirmTransactionUsingDurableNonceStrategy","getCancellationPromise","signal","addEventListener","getTransactionConfirmationPromise","_ref14","signatureSubscriptionId","disposeSignatureSubscriptionStateChangeObserver","abortConfirmation","removeSignatureListener","confirmationPromise","onSignature","__type","PROCESSED","subscriptionSetupPromise","resolveSubscriptionSetup","_onSubscriptionStateChange","nextState","getSignatureStatus","_ref15","expiryPromise","checkBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","cancellationPromise","outcome","race","_ref16","currentNonceValue","lastCheckedSlot","getCurrentNonceValue","getNonceAndContext","NONCE_INVALID","slotInWhichNonceDidAdvance","_signatureStatus","signatureStatus","_outcome$slotInWhichN","commitmentForStatus","_ref17","timeoutId","timeoutMs","TIMED_OUT","clearTimeout","getClusterNodes","getVoteAccounts","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getInflationRate","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentPrioritizationFees","_config$lockedWritabl","lockedWritableAccounts","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","isBlockhashValid","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","transactionDetails","_ref18","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","_ref19","_ref20","getBlocks","endSlot","getBlockSignatures","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","expired","Date","now","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","_updateSubscriptions","MAX_SAFE_INTEGER","clearInterval","_ref21","_setSubscription","nextSubscription","_this$_subscriptionsB","prevState","stateChangeCallbacks","cb","clientSubscriptionId","_this$_subscriptionSt","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","recentSlot","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","isValidPrivateKey","publicKeyCreate","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","ecdsaSign","msgHash","toCompactRawBytes","recovery","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","_class2","STAKE_INSTRUCTION_LAYOUTS","Initialize","lockup","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","Staker","Withdrawer","StakeProgram","initialize","stakePubkey","maybeLockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","voteInit","voteAuthorizeWithSeedArgs","Voter","VoteProgram","initializeAccount","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","authorizedWithdrawerPubkey","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","website","details","keybaseUsername","CHAIN_NAMESPACES","Web3AuthError","CustomError","_defineProperty","WalletInitializationError","fromCode","extraMessage","messages","notFound","notInstalled","notReady","windowBlocked","windowClosed","incompatibleChainNameSpace","duplicateAdapterError","invalidProviderConfigError","providerNotReadyError","rpcConnectionError","invalidParams","invalidNetwork","WalletLoginError","connectionError","disconnectionError","notConnectedError","popupClosed","mfaEnabled","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","_objectSpread$1","TORUS_SOLANA","PHANTOM","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","_objectSpread","ADAPTER_DATA_UPDATED","loglevel","isHexStrict","createChainIdMiddleware","chainId","req","end","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createGetAccountsMiddleware","getAccounts","createAsyncMiddleware","createRequestAccountsMiddleware","requestAccounts","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","BaseProvider","chainConfig","_objectSpread$3","chainNamespace","switchChain","setupProvider","injectedProvider","engine","JRPCEngine","solanaMiddleware","getProviderHandlers","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","getBaseProviderHandlers","ethErrors","methodNotSupported","display","_req$params","_req$params2","createInjectedProviderProxyMiddleware","_next","_objectSpread$2","PhantomInjectedProvider","isVersionTransction","SlopeInjectedProxyProvider","getSlopeHandlers","getProviderEngineProxy","txMessage","invalidRequest","custom","conn","rpcTarget","_data$signatures","allTxns","unsignedTx","SolflareInjectedProvider","getSolflareHandlers","solflareProviderHandlers","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","emit","_req$params3","_req$params4","_req$params5","getTorusHandlers","configure","SolanaPrivateKeyProvider","enable","_providerEngineProxy","keyPair","nacl","detached","_req$params6","txns","tx","networkMiddleware","createFetchMiddleware","createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","updateAccount","getChainConfig","health","addNewChainConfig","switchSolanaChain","createChainSwitchMiddleware","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","updatePrivatekey","createAccountMiddleware","providerFactory","SolanaWallet","_Buffer","module","ALPHABET","BASE_MAP","j","charAt","xc","charCodeAt","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","reversed","reverse","num","width","padStart","__createBinding","o","m","k2","enumerable","__setModuleDefault","__decorate","decorators","target","desc","getOwnPropertyDescriptor","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","addToFieldPath","fieldName","maybeResize","writeU8","writeUInt8","writeU16","writeUInt16LE","writeU32","writeU64","writeBuffer","toArray","writeU128","writeU256","writeU512","subarray","writeString","writeFixedArray","writeArray","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","apply","readU8","readUInt8","readU16","readUInt16LE","readU32","readU64","readBuffer","readU128","readU256","readU512","readString","readFixedArray","readArray","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","serializeStruct","borshSerialize","structSchema","deserializeField","reader","deserializeStruct","classType","borshDeserialize","basex","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","self","isBatch","hasCallback","_parseResponse","responseText","parse","isError","isNotError","_interopRequireDefault","_regenerator","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_eventemitter","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","__rest","getOwnPropertySymbols","propertyIsEnumerable","CommonClient","_EventEmitter","_super","webSocketFactory","_this","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","reconnect_timer_id","current_reconnects","_connect","timeout","ws_opts","_this2","send","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","event","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","ArrayBuffer","listeners","EventEmitter","WebSocketBrowserImpl","protocols","window","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","listener","Events","EE","once","addListener","emitter","evt","_events","_eventsCount","clearEvent","__proto__","eventNames","events","names","handlers","l","ee","listenerCount","a1","a2","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","getRandomValues","rnds8","rng","crypto","msCrypto","REGEX","byteToHex","toLowerCase","rnds","random","ReferenceError","asyncGeneratorStep","gen","_throw","Constructor","toPropertyKey","_defineProperties","descriptor","configurable","protoProps","staticProps","_getPrototypeOf","setPrototypeOf","getPrototypeOf","subClass","superClass","_typeof","assertThisInitialized","_setPrototypeOf","hint","prim","toPrimitive","min","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","finished","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}